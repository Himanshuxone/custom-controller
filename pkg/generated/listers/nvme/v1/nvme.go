/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "custom-controller/pkg/apis/nvme/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NvmeLister helps list Nvmes.
// All objects returned here must be treated as read-only.
type NvmeLister interface {
	// List lists all Nvmes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Nvme, err error)
	// Nvmes returns an object that can list and get Nvmes.
	Nvmes(namespace string) NvmeNamespaceLister
	NvmeListerExpansion
}

// nvmeLister implements the NvmeLister interface.
type nvmeLister struct {
	indexer cache.Indexer
}

// NewNvmeLister returns a new NvmeLister.
func NewNvmeLister(indexer cache.Indexer) NvmeLister {
	return &nvmeLister{indexer: indexer}
}

// List lists all Nvmes in the indexer.
func (s *nvmeLister) List(selector labels.Selector) (ret []*v1.Nvme, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Nvme))
	})
	return ret, err
}

// Nvmes returns an object that can list and get Nvmes.
func (s *nvmeLister) Nvmes(namespace string) NvmeNamespaceLister {
	return nvmeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NvmeNamespaceLister helps list and get Nvmes.
// All objects returned here must be treated as read-only.
type NvmeNamespaceLister interface {
	// List lists all Nvmes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Nvme, err error)
	// Get retrieves the Nvme from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Nvme, error)
	NvmeNamespaceListerExpansion
}

// nvmeNamespaceLister implements the NvmeNamespaceLister
// interface.
type nvmeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Nvmes in the indexer for a given namespace.
func (s nvmeNamespaceLister) List(selector labels.Selector) (ret []*v1.Nvme, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Nvme))
	})
	return ret, err
}

// Get retrieves the Nvme from the indexer for a given namespace and name.
func (s nvmeNamespaceLister) Get(name string) (*v1.Nvme, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nvme"), name)
	}
	return obj.(*v1.Nvme), nil
}
